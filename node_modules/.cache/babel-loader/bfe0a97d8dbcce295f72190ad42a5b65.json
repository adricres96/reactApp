{"ast":null,"code":"import _defineProperty from \"/Users/crespadr/Documents/react/basics/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/crespadr/Documents/react/basics/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/crespadr/Documents/react/basics/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/crespadr/Documents/react/basics/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/crespadr/Documents/react/basics/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/crespadr/Documents/react/basics/my-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/crespadr/Documents/react/basics/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/crespadr/Documents/react/basics/my-app/src/MemeGenerator.js\";\nimport React, { Component } from \"react\";\n/**\n * Initialize state to save the following data:\n *      top text\n *      bottom text\n *      random image (intialize with \"http://i.imgflip.com/1bij.jpg\")\n */\n\nvar MemeGenerator =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MemeGenerator, _Component);\n\n  function MemeGenerator() {\n    var _this;\n\n    _classCallCheck(this, MemeGenerator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemeGenerator).call(this));\n    _this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: []\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n          * We'll be using an API that provides a bunch of meme images.\n          *\n          * Your task:\n          * make an API call to \"https://api.imgflip.com/get_memes\" and save the\n          * data that comes back (`response.data.memes`) to a new state property\n          * called `allMemeImgs`. (The data that comes back is an array)\n          */\n\n\n  _createClass(MemeGenerator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"https://api.imgflip.com/get_memes\").then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        var memes = response.data.memes;\n        console.log(memes[0]);\n\n        _this2.setState({\n          allMemeImgs: memes\n        });\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      console.log(\"hello\");\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      console.log([name]);\n      this.setState(_defineProperty({}, name, value));\n    }\n    /**\n         * Create a method that, when the \"Gen\" button is clicked, chooses one of the\n         * memes from our `allMemeImgs` array at random and makes it so that is the\n         * meme image that shows up in the bottom portion of our meme generator site\n         */\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"meme-form\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"topText\",\n        placeholder: \"Top Text\",\n        value: this.state.topText,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"bottomText\",\n        placeholder: \"Bottom Text\",\n        value: this.state.bottomText,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Gen\")), React.createElement(\"div\", {\n        className: \"meme\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: this.state.randomImg,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        className: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.topText), React.createElement(\"h2\", {\n        className: \"bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, this.state.bottomText)));\n    }\n  }]);\n\n  return MemeGenerator;\n}(Component);\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/Users/crespadr/Documents/react/basics/my-app/src/MemeGenerator.js"],"names":["React","Component","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","fetch","then","response","json","memes","data","console","log","setState","event","target","name","value","preventDefault","handleSubmit"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA;;;;;;;IAOMC,a;;;;;AACF,2BAAc;AAAA;;AAAA;;AAChB;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,OAAO,EAAE,EADG;AAEZC,MAAAA,UAAU,EAAE,EAFA;AAGZC,MAAAA,SAAS,EAAE,+BAHC;AAIZC,MAAAA,WAAW,EAAE;AAJD,KAAb;AAMA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AARgB;AAShB;AAED;;;;;;;;;;;;wCASoB;AAAA;;AACTC,MAAAA,KAAK,CAAC,mCAAD,CAAL,CACKC,IADL,CACU,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADlB,EAEKF,IAFL,CAEU,UAAAC,QAAQ,EAAI;AAAA,YACPE,KADO,GACEF,QAAQ,CAACG,IADX,CACPD,KADO;AAEdE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAAC,CAAD,CAAjB;;AACA,QAAA,MAAI,CAACI,QAAL,CAAc;AAAEX,UAAAA,WAAW,EAAEO;AAAf,SAAd;AACH,OANL;AAOH;;;iCAEKK,K,EAAO;AACnBH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AADmB,0BAEEE,KAAK,CAACC,MAFR;AAAA,UAEZC,IAFY,iBAEZA,IAFY;AAAA,UAEPC,KAFO,iBAEPA,KAFO;AAGnBN,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACI,IAAD,CAAZ;AACA,WAAKH,QAAL,qBACEG,IADF,EACSC,KADT;AAGG;AAED;;;;;;;;iCAMUH,K,EAAO;AAChBA,MAAAA,KAAK,CAACI,cAAN;AACA;;;6BAGQ;AACL,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACL;AAAM,QAAA,SAAS,EAAC,WAAhB;AAA4B,QAAA,QAAQ,EAAE,KAAKC,YAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AACC,QAAA,IAAI,EAAC,MADN;AAEC,QAAA,IAAI,EAAC,SAFN;AAGC,QAAA,WAAW,EAAC,UAHb;AAIC,QAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWC,OAJnB;AAKC,QAAA,QAAQ,EAAE,KAAKI,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAQC;AACC,QAAA,IAAI,EAAC,MADN;AAEC,QAAA,IAAI,EAAC,YAFN;AAGC,QAAA,WAAW,EAAC,aAHb;AAIC,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWE,UAJnB;AAKC,QAAA,QAAQ,EAAE,KAAKG,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARD,EAgBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAhBD,CADK,EAmBL;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,GAAG,EAAE,KAAKL,KAAL,CAAWG,SAArB;AAAgC,QAAA,GAAG,EAAC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAEC;AAAI,QAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqB,KAAKH,KAAL,CAAWC,OAAhC,CAFD,EAGC;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwB,KAAKD,KAAL,CAAWE,UAAnC,CAHD,CAnBK,CADD;AA2BH;;;;EA/EuBJ,S;;AAkF5B,eAAeC,aAAf","sourcesContent":["import React, {Component} from \"react\"\n\n/**\n * Initialize state to save the following data:\n *      top text\n *      bottom text\n *      random image (intialize with \"http://i.imgflip.com/1bij.jpg\")\n */\n\nclass MemeGenerator extends Component {\n    constructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\ttopText: \"\",\n\t\t\tbottomText: \"\",\n\t\t\trandomImg: \"http://i.imgflip.com/1bij.jpg\",\n\t\t\tallMemeImgs: []\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this)\n\t}\n\n\t/**\n         * We'll be using an API that provides a bunch of meme images.\n         *\n         * Your task:\n         * make an API call to \"https://api.imgflip.com/get_memes\" and save the\n         * data that comes back (`response.data.memes`) to a new state property\n         * called `allMemeImgs`. (The data that comes back is an array)\n         */\n\n\tcomponentDidMount() {\n            fetch(\"https://api.imgflip.com/get_memes\")\n                .then(response => response.json())\n                .then(response => {\n                    const {memes} = response.data\n                    console.log(memes[0])\n                    this.setState({ allMemeImgs: memes })\n                })\n        }\n\n\thandleChange(event) {\n\t\tconsole.log(\"hello\")\n\t\tconst {name,value} = event.target\n\t\tconsole.log([name])\n\t\tthis.setState({\n\t\t\t[name]: value\n\t\t})\n    }\n\n    /**\n         * Create a method that, when the \"Gen\" button is clicked, chooses one of the\n         * memes from our `allMemeImgs` array at random and makes it so that is the\n         * meme image that shows up in the bottom portion of our meme generator site\n         */\n\n\thandleSubmit(event) {\n    \tevent.preventDefault()\n    }\n\n\n    render() {\n        return (\n        \t<div>\n\t\t\t\t<form className=\"meme-form\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"topText\"\n\t\t\t\t\t\tplaceholder=\"Top Text\"\n\t\t\t\t\t\tvalue={this.state.topText}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"bottomText\"\n\t\t\t\t\t\tplaceholder=\"Bottom Text\"\n\t\t\t\t\t\tvalue={this.state.bottomText}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<button>Gen</button>\n\t\t\t\t</form>\n\t\t\t\t<div className=\"meme\">\n\t\t\t\t\t<img src={this.state.randomImg} alt=\"\" />\n\t\t\t\t\t<h2 className=\"top\">{this.state.topText}</h2>\n\t\t\t\t\t<h2 className=\"bottom\">{this.state.bottomText}</h2>\n\t\t\t\t</div>\n\t\t\t</div>\n        )\n    }\n}\n\nexport default MemeGenerator"]},"metadata":{},"sourceType":"module"}